{"version":3,"file":"static/js/973.d6c707c9.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","components/spinner/Spinner.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage'\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport thor from '../../resources/img/thor.jpeg';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n    const [char, setChar] = useState({});\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n    const onUpdateChar = () => {\n        updateChar();\n    }\n    \n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            \n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button disabled={loading} className=\"button button__main\" onClick={onUpdateChar}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle =(thumbnail ==='http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') ? {'objectFit': 'contain'} : {'objectFit': 'cover'}\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} style={imgStyle} alt=\"Random character\" className=\"randomchar__img\"/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef } from 'react';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage'\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charList.scss';\n\nconst CharList = (props) =>  {\n\n    const [char, setChar] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(436);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n\n    useEffect(() => {\n        onRequuest(offset, true);\n    }, [])\n\n    const onRequuest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (newChar) => {\n        let ended = false;\n        if (newChar.lenght < 9) {\n            ended = true;\n        }\n\n        setChar(char => [...char, ...newChar]);\n        setOffset(offset => offset + 9);\n        setNewItemLoading(false);\n        setCharEnded(charEnded => ended);\n        \n    }\n\n    const itemRef = useRef([]);\n\n\n    const onCharSelected = (id, index) => {\n        props.onCharSelected(id);\n        itemRef.current.forEach(item => {\n            item.classList.remove('char__item_selected');\n        });\n        itemRef.current[index].classList.add('char__item_selected');\n    }\n\n\n    // Этот метод создан для оптимизации, \n    // чтобы не помещать такую конструкцию в метод render\n    function renderItems(arr) {\n        const items = arr.map((item, index) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <li \n                    className=\"char__item\"\n                    key={item.id}\n                    ref={el => itemRef.current[index] = el}\n                    onClick={() => onCharSelected(item.id, index)}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        // Для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n    const items = renderItems(char)\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequuest(offset)}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage'\nimport useMarvelService from '../../services/MarvelService';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\nimport { Link } from 'react-router-dom';\n\nconst CharInfo = (props) => {\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.id])\n\n    const updateChar = () => {\n        const {id} = props;\n        if (!id) {\n            return;\n        }\n\n        clearError();\n        getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const skeleton = !(char || loading || error) ? <Skeleton/> : null;\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(skeleton || loading || error) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <>\n             <div className=\"char__basics\">\n                <img src={thumbnail} style={imgStyle} alt={name}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.slice(0, 10).map((item, i) => {\n                        // eslint-disable-next-line\n                        // if (i > 9) return;\n                        return (\n                            <li key={i}>\n                                <Link to={`/comics/${item.resourceURI.slice(43)}`} className=\"char__comics-item\">\n                                    {item.name}\n                                </Link>\n                            </li>\n                        )\n                    })\n                }                \n            </ul>\n        </>\n    )\n}\n\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport decoration from '../../resources/img/vision.png';\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\n\r\nconst MainPage = () => {\r\n    const [id, setId] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setId(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"/>\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo id={id}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","const Spinner = () => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" style={{margin: '0 auto', background: 'none', display: 'block'}} width=\"200px\" height=\"200px\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\">\r\n            <g transform=\"translate(80,50)\">\r\n            <g transform=\"rotate(0)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"1\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.875s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.875s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(71.21320343559643,71.21320343559643)\">\r\n            <g transform=\"rotate(45)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.875\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.75s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.75s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(50,80)\">\r\n            <g transform=\"rotate(90)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.75\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.625s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.625s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(28.786796564403577,71.21320343559643)\">\r\n            <g transform=\"rotate(135)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.625\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.5s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.5s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(20,50.00000000000001)\">\r\n            <g transform=\"rotate(180)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.5\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.375s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.375s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(28.78679656440357,28.786796564403577)\">\r\n            <g transform=\"rotate(225)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.375\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.25s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.25s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(49.99999999999999,20)\">\r\n            <g transform=\"rotate(270)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.25\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.125s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.125s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(71.21320343559643,28.78679656440357)\">\r\n            <g transform=\"rotate(315)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.125\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"0s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"0s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g>\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Spinner;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const { loading, request, error, clearError } = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=40e875820323d71cfb44b782b2566361';\r\n    const _baseOffset = 300;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter)\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0])\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\r\n            homepage: char.urls[0].url, \r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`)\r\n        return res.data.results.map(_transformComics)\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0])\r\n    }\r\n\r\n    const _transformComics = (e) => {\r\n        return {\r\n            id: e.id,\r\n            thumbnail: `${e.thumbnail.path}.${e.thumbnail.extension}`,\r\n            name: e.title,\r\n            price: e.prices[0].price\r\n\t\t\t\t? `${e.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n            description: e.description || 'There is no description for this character',\r\n            pageCount: e.pageCount\r\n\t\t\t\t? `${e.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n            language: e.textObjects[0]?.language || \"en-us\",\r\n\r\n        }\r\n    } \r\n\r\n    return {\r\n\t\tloading,\r\n\t\terror,\r\n\t\tclearError,\r\n\t\tgetAllCharacters,\r\n        getCharacterByName,\r\n\t\tgetCharacter,\r\n\t\tgetAllComics,\r\n\t\tgetComic,\r\n\t};\r\n}\r\n\r\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","char","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","RandomChar","setChar","useState","loading","error","getCharacter","clearError","useMarvelService","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","errorMessage","spinner","Spinner","content","disabled","onClick","onUpdateChar","mjolnir","props","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequuest","initial","newChar","ended","lenght","itemRef","useRef","items","arr","map","item","index","ref","el","current","onCharSelected","forEach","classList","remove","add","renderItems","Skeleton","_Fragment","comics","length","slice","i","Link","to","concat","resourceURI","skeleton","ErrorBoundary","Component","constructor","arguments","state","componentDidCatch","errorInfo","console","log","this","setState","render","CharSearchForm","getCharacterByName","results","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","component","MainPage","setId","Helmet","CharList","CharInfo","decoration","xmlns","background","viewBox","preserveAspectRatio","transform","cx","cy","r","fill","fillOpacity","attributeName","begin","values","keyTimes","dur","repeatCount","request","useHttp","setLoading","setError","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","path","extension","urls","_transformComics","_e$textObjects$","title","price","prices","pageCount","language","textObjects","res","getAllComics","getComic"],"sourceRoot":""}